require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.

  let!(:project){ create :project }

  let(:valid_attributes) {
    attributes_for(:comment)
  }

  let(:invalid_attributes) {
    attributes_for(:comment, body: nil)
  }

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post project_comments_url(project), params: { comment: valid_attributes }
        }.to change(Comment, :count).by(1)
      end

      it "redirects to the created comment" do
        post project_comments_url(project), params: { comment: valid_attributes }
        expect(response).to redirect_to(project_url(project))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post project_comments_url(project), params: { comment: invalid_attributes }
        }.to change(Comment, :count).by(0)
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:project){ create :project }

    it "destroys the requested comment" do
      comment = create(:comment, project: project)
      expect {
        delete project_comment_url(project, comment)
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      comment = create(:comment, project: project)
      delete project_comment_url(project, comment)
      expect(response).to redirect_to(project_url(project))
    end
  end
end
